{"version":3,"file":"table-selection.min.js","mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAwB,eAAID,IAE5BD,EAAqB,eAAIC,GAC1B,CATD,CASGK,MAAM,uBCRT,IAAIC,EAAsB,CCA1BA,EAAwB,CAACL,EAASM,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAER,EAASO,IAC5EE,OAAOC,eAAeV,EAASO,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,gtBCU5EI,EAAsC,CACxCC,aAAcC,SACdC,SAAU,mBACVC,iBAAkB,QAClBC,kBAAmB,YCNvB,QDSA,WAKI,WAAYC,QAAA,IAAAA,IAAAA,EAAA,GAAZ,WAHA,KAAAC,MAAoC,KAIhCC,KAAKF,OAAS,EAAH,GAAQA,GAEX,IAAAL,EAAiBO,KAAKF,OAAM,aAG9BG,EAASR,EAAaS,cAAc,SAC1CD,EAAOE,UAAY,UAAGH,KAAKF,OAAOH,SAAQ,iGAI1CF,EAAaW,KAAKC,YAAYJ,GAE9BR,EAAaa,iBAAiB,mBAAmB,WAAM,SAAKC,mBAAL,IACvDd,EAAaa,iBAAiB,QAAQ,SAACE,GAAM,SAAKC,gBAAgBD,EAArB,GACjD,CA6NJ,OA3Nc,YAAAD,kBAAV,WACI,IAAMG,EAAYC,eAGlB,GADAX,KAAKY,WACCF,IAAaA,EAAUG,YAA7B,CAIA,IAAMC,EAAyCd,KAAKe,uBAAuBL,EAAUM,YAC/EC,EAAuCjB,KAAKe,uBAAuBL,EAAUQ,WAEnF,GAAMJ,GAAeG,EAArB,CAIA,IAAME,EAAqBnB,KAAKoB,gCAAgCN,GAC1DO,EAAmBrB,KAAKoB,gCAAgCH,GACxDE,GAAwBE,GAIVF,EAAmBG,QAAUD,EAAiBC,QAKlEtB,KAAKuB,SAAWJ,EAEhBnB,KAAKwB,6BAA6BV,EAAWG,GAC7CjB,KAAKyB,iBACLzB,KAAK0B,kBAED1B,KAAKD,MACLC,KAAK2B,SAEL3B,KAAKY,aAEb,EAEU,YAAAY,6BAAV,SACII,EACAC,WAGMC,EAA8CF,EAAiBG,cAC/DC,EAA4CH,EAAeE,cAE3DD,GAAqBE,IAI3BhC,KAAKD,MAAQ,CACTkC,MAAO,CACHC,IAAKJ,EAAgBK,SAAW,EAChCC,KAAMR,EAAiBS,UAAY,GAEvCC,IAAK,CACDJ,IAAKF,EAAcG,SAAW,EAC9BC,KAAMP,EAAeQ,UAAY,GAErCE,YAAa,GACbC,KAAM,GACNC,MAAO,IAIPzC,KAAKD,MAAMkC,MAAMG,KAAOpC,KAAKD,MAAMuC,IAAIF,OACvC,IAA+C,CAACpC,KAAKD,MAAMuC,IAAIF,KAAMpC,KAAKD,MAAMkC,MAAMG,MAAK,GAA1FpC,KAAKD,MAAMkC,MAAMG,KAAI,KAAEpC,KAAKD,MAAMuC,IAAIF,KAAI,MAE3CpC,KAAKD,MAAMkC,MAAMC,IAAMlC,KAAKD,MAAMuC,IAAIJ,MACtC,IAA6C,CAAClC,KAAKD,MAAMuC,IAAIJ,IAAKlC,KAAKD,MAAMkC,MAAMC,KAAI,GAAtFlC,KAAKD,MAAMkC,MAAMC,IAAG,KAAElC,KAAKD,MAAMuC,IAAIJ,IAAG,MAEjD,EAEU,YAAAT,eAAV,WACI,GAAMzB,KAAKD,OAAWC,KAAKuB,SAASD,MAApC,CAIA,IAAMoB,EAAkB1C,KAAKuB,SAASD,MAAMqB,iBAAiB,YAAYC,OACrEC,EAAmC,GACnCC,EAAmC,GAEjCC,EAAa/C,KAAKD,MAAMkC,MAAMC,KAAOQ,EACrCM,KAAKC,IAAIP,EAAiB1C,KAAKD,MAAMkC,MAAMC,KAC3C,KACAgB,EAAWlD,KAAKD,MAAMkC,MAAMC,KAAOQ,EACnCM,KAAKC,IAAIP,EAAiB1C,KAAKD,MAAMuC,IAAIJ,KACzC,KAEAiB,EAAanD,KAAKD,MAAMuC,IAAIJ,IAAMQ,EAClCM,KAAKI,IAAI,EAAGpD,KAAKD,MAAMkC,MAAMC,IAAMQ,GACnC,KACAW,EAAWrD,KAAKD,MAAMuC,IAAIJ,IAAMQ,EAChCM,KAAKI,IAAI,EAAGpD,KAAKD,MAAMuC,IAAIJ,IAAMQ,GACjC,KAEFK,IACAF,EAAYS,MAAMC,KAAKvD,KAAKuB,SAASD,MAAMqB,iBACvC,iCAA0BI,EAAU,4BAAoBG,EAAQ,QAIpEC,IACAL,EAAYQ,MAAMC,KAAKvD,KAAKuB,SAASD,MAAMqB,iBACvC,iCAA0BQ,EAAU,4BAAoBE,EAAQ,QAIxErD,KAAKD,MAAMwC,YAAc,EAAH,OAAOM,IAAS,KAAKC,IAAS,GACxD,EAEU,YAAApB,gBAAV,sBACI,GAAM1B,KAAKD,OAAWC,KAAKD,MAAMwC,YAAjC,CAIA,IAAIE,EAAgC,GACpCzC,KAAKD,MAAMwC,YAAYiB,SAAQ,SAACtB,EAA0BuB,GACtD,GAAM,EAAK1D,MAAX,CAIA,IAAM2D,EAAaJ,MAAMC,KAAKrB,EAAIS,iBAC9B,CACI,2BAAoB,EAAK5C,MAAMkC,MAAMG,KAAI,4BAAoB,EAAKrC,MAAMuC,IAAIF,KAAI,KAChF,2BAAoB,EAAKrC,MAAMkC,MAAMG,KAAI,4BAAoB,EAAKrC,MAAMuC,IAAIF,KAAI,MAClFuB,KAAK,OAGXlB,EAAQ,EAAH,OAAOA,IAAK,KAAKiB,IAAU,GAChC,EAAK3D,MAAMyC,KAAKiB,GAAKC,EACzB,IAEA1D,KAAKD,MAAM0C,MAAQA,EAEvB,EAEU,YAAA1B,uBAAV,SAAiC6C,GAC7B,IAAMA,EACF,OAAO,KAGX,IAAMC,EAA8D,UAAvBD,EAAUE,SAChDF,EAAU7B,cAAuCgC,QAAQ,SACzDH,EAEP,OAAMC,GAAa,CAAC,KAAM,MAAMG,SAASH,EAAQI,SAI1CJ,EAHI,IAIf,EAEU,YAAAzC,gCAAV,SAA0C8C,GACtC,IAAMA,IAAiBA,EAAYnC,gBAAmBmC,EAAYnC,cAAcA,cAC5E,OAAO,KAGX,IAAMoC,EAAcD,EAAYnC,cAAcA,cACxCT,EAA0B,CAAC,QAAS,SAAS0C,SAASG,EAAYF,SACjEE,EAAYpC,cACZoC,EAEP,OAAM7C,GAAWtB,KAAKF,OAAOH,UAAc2B,EAAM8C,QAAQpE,KAAKF,OAAOH,UAI9D,CACH2B,MAAK,EACL+C,MAAO/C,EAAMgD,cAAc,SAC3BC,MAAOjD,EAAMgD,cAAc,UANpB,IAQf,EAEU,YAAA3C,OAAV,sBACQ3B,KAAKD,OAASC,KAAKD,MAAM0C,OACzBzC,KAAKD,MAAM0C,MAAMe,SAAQ,SAACU,GACe,aAAjC,EAAKpE,OAAOF,kBAAmC,EAAKE,OAAOD,kBAC3DqE,EAAYM,UAAUC,IAAI,EAAK3E,OAAOD,oBAEtCqE,EAAYQ,MAAMC,gBAAkB,qDACpCT,EAAYQ,MAAME,MAAQ,8CAElC,GAER,EAEU,YAAAhE,SAAV,sBACQZ,KAAKD,OAASC,KAAKD,MAAM0C,QACzBzC,KAAKD,MAAM0C,MAAMe,SAAQ,SAACU,GACe,aAAjC,EAAKpE,OAAOF,kBAAmC,EAAKE,OAAOD,kBAC3DqE,EAAYM,UAAUK,OAAO,EAAK/E,OAAOD,oBAEzCqE,EAAYQ,MAAMI,eAAe,oBACjCZ,EAAYQ,MAAMI,eAAe,SAEzC,IACA9E,KAAKD,MAAQ,KAErB,EAEU,YAAAU,gBAAV,SAA0BD,GACtB,GAAMR,KAAKD,OAAWC,KAAKD,MAAMyC,MAAUhC,EAAEuE,cAA7C,CAIA,IAAMC,EAAiBhF,KAAKD,MAAMyC,KAC7ByC,KAAI,SAAC/C,GAAQ,OAAAA,EAAI+C,KAAI,SAAC7C,GAAS,OAAAA,EAAK8C,SAAL,IAAgBvB,KAAK,KAAvC,IACbA,KAAK,QAEJqB,IAINxE,EAAEuE,cAAcI,QAAQ,aAAcH,GACtCxE,EAAE4E,kBACN,EAEJ,EAjPA","sources":["webpack://TableSelection/webpack/universalModuleDefinition","webpack://TableSelection/webpack/bootstrap","webpack://TableSelection/webpack/runtime/define property getters","webpack://TableSelection/webpack/runtime/hasOwnProperty shorthand","webpack://TableSelection/./src/ts/TableSelection.ts","webpack://TableSelection/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TableSelection\"] = factory();\n\telse\n\t\troot[\"TableSelection\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/*!\n * TableSelection library v1.0.0 (https://github.com/PXLWidgets/table-selection)\n * Copyright (c) 2019 Wouter Smit\n * Licensed under MIT (https://github.com/PXLWidgets/table-selection/blob/master/LICENSE)\n*/\n\nimport { TableSelectionConfig } from './interfaces/TableSelectionConfig';\nimport { TableSelectionRange } from './interfaces/TableSelectionRange';\nimport { TableSelectionTableElements } from './interfaces/TableSelectionTableElements';\n\nconst defaultConfig: TableSelectionConfig = {\n    rootDocument: document,\n    selector: '.table-selection',\n    selectionCssMode: 'style',\n    selectionCssClass: 'selected',\n};\n\nexport class TableSelection {\n    config: TableSelectionConfig;\n    range: TableSelectionRange | null = null;\n    elements: TableSelectionTableElements;\n\n    constructor(config: TableSelectionConfig = defaultConfig) {\n        this.config = { ...config };\n\n        const { rootDocument } = this.config;\n\n        // Hide default selection\n        const styles = rootDocument.createElement('style');\n        styles.innerHTML = `${this.config.selector} *::selection {\n            background: transparent;\n            color: inherit;\n        }`;\n        rootDocument.head.appendChild(styles);\n\n        rootDocument.addEventListener('selectionchange', () => this.onSelectionChange());\n        rootDocument.addEventListener('copy', (e) => this.copyToClipboard(e));\n    }\n\n    protected onSelectionChange(): void {\n        const selection = getSelection();\n\n        this.deselect();\n        if (! selection || selection.isCollapsed) {\n            return;\n        }\n\n        const startCell: HTMLTableCellElement | null = this.getCellElementFromNode(selection.anchorNode);\n        const endCell: HTMLTableCellElement | null = this.getCellElementFromNode(selection.focusNode);\n\n        if (! startCell || ! endCell) {\n            return;\n        }\n\n        const startTableElements = this.getTableElementsFromCellElement(startCell);\n        const endTableElements = this.getTableElementsFromCellElement(endCell);\n        if (! startTableElements || ! endTableElements) {\n            return;\n        }\n\n        const isSameTable = startTableElements.table === endTableElements.table;\n        if (! isSameTable) {\n            return;\n        }\n\n        this.elements = startTableElements;\n\n        this.getRangeByStartAndEndElement(startCell, endCell);\n        this.getRowElements();\n        this.getRowsAndCells();\n\n        if (this.range) {\n            this.select();\n        } else {\n            this.deselect();\n        }\n    }\n\n    protected getRangeByStartAndEndElement(\n        startCellElement: HTMLTableCellElement,\n        endCellElement: HTMLTableCellElement,\n    ): void {\n\n        const startRowElement: HTMLTableRowElement | null = startCellElement.parentElement as HTMLTableRowElement;\n        const endRowElement: HTMLTableRowElement | null = endCellElement.parentElement as HTMLTableRowElement;\n\n        if (! startRowElement || ! endRowElement) {\n            return;\n        }\n\n        this.range = {\n            start: {\n                row: startRowElement.rowIndex + 1,\n                cell: startCellElement.cellIndex + 1,\n            },\n            end: {\n                row: endRowElement.rowIndex + 1,\n                cell: endCellElement.cellIndex + 1,\n            },\n            rowElements: [],\n            rows: [],\n            cells: [],\n        };\n\n        // Flip start/end if end > start\n        if (this.range.start.cell > this.range.end.cell) {\n            [this.range.start.cell, this.range.end.cell] = [this.range.end.cell, this.range.start.cell];\n        }\n        if (this.range.start.row > this.range.end.row) {\n            [this.range.start.row, this.range.end.row] = [this.range.end.row, this.range.start.row];\n        }\n    }\n\n    protected getRowElements(): void {\n        if (! this.range || ! this.elements.table) {\n            return;\n        }\n\n        const numTableHeaders = this.elements.table.querySelectorAll('thead tr').length;\n        let theadRows: HTMLTableRowElement[] = [];\n        let tbodyRows: HTMLTableRowElement[] = [];\n\n        const theadStart = this.range.start.row <= numTableHeaders\n            ? Math.min(numTableHeaders, this.range.start.row)\n            : null;\n        const theadEnd = this.range.start.row <= numTableHeaders\n            ? Math.min(numTableHeaders, this.range.end.row)\n            : null;\n\n        const tbodyStart = this.range.end.row > numTableHeaders\n            ? Math.max(1, this.range.start.row - numTableHeaders)\n            : null;\n        const tbodyEnd = this.range.end.row > numTableHeaders\n            ? Math.max(1, this.range.end.row - numTableHeaders)\n            : null;\n\n        if (theadStart) {\n            theadRows = Array.from(this.elements.table.querySelectorAll(\n                `thead tr:nth-of-type(n+${theadStart}):nth-of-type(-n+${theadEnd})`,\n            ));\n        }\n\n        if (tbodyStart) {\n            tbodyRows = Array.from(this.elements.table.querySelectorAll(\n                `tbody tr:nth-of-type(n+${tbodyStart}):nth-of-type(-n+${tbodyEnd})`,\n            ));\n        }\n\n        this.range.rowElements = [...theadRows, ...tbodyRows];\n    }\n\n    protected getRowsAndCells(): void {\n        if (! this.range || ! this.range.rowElements) {\n            return;\n        }\n\n        let cells: HTMLTableCellElement[] = [];\n        this.range.rowElements.forEach((row: HTMLTableRowElement, i: number) => {\n            if (! this.range) {\n                return;\n            }\n\n            const cellsInRow = Array.from(row.querySelectorAll(\n                [\n                    `td:nth-of-type(n+${this.range.start.cell}):nth-of-type(-n+${this.range.end.cell})`,\n                    `th:nth-of-type(n+${this.range.start.cell}):nth-of-type(-n+${this.range.end.cell})`,\n                ].join(',')\n            )) as HTMLTableCellElement[];\n\n            cells = [...cells, ...cellsInRow];\n            this.range.rows[i] = cellsInRow;\n        });\n\n        this.range.cells = cells;\n\n    }\n\n    protected getCellElementFromNode(inputNode: Node | null): HTMLTableCellElement | null {\n        if (! inputNode) {\n            return null;\n        }\n\n        const element: HTMLTableCellElement | null = inputNode.nodeName === '#text'\n            ? (inputNode.parentElement as HTMLTableCellElement).closest('td,th')\n            : (inputNode as HTMLTableCellElement);\n\n        if (! element || ! ['TD', 'TH'].includes(element.tagName)) {\n            return null;\n        }\n\n        return element;\n    }\n\n    protected getTableElementsFromCellElement(cellElement: HTMLTableCellElement): TableSelectionTableElements | null {\n        if (! cellElement || ! cellElement.parentElement || ! cellElement.parentElement.parentElement) {\n            return null;\n        }\n\n        const tHeadOrBody = cellElement.parentElement.parentElement;\n        const table: HTMLTableElement = ['TBODY', 'THEAD'].includes(tHeadOrBody.tagName)\n            ? (tHeadOrBody.parentElement as HTMLTableElement)\n            : (tHeadOrBody as HTMLTableElement);\n\n        if (! table || ! this.config.selector || ! table.matches(this.config.selector)) {\n            return null;\n        }\n\n        return {\n            table,\n            thead: table.querySelector('thead') as HTMLTableSectionElement,\n            tbody: table.querySelector('tbody') as HTMLTableSectionElement,\n        };\n    }\n\n    protected select(): void {\n        if (this.range && this.range.cells) {\n            this.range.cells.forEach((cellElement) => {\n                if (this.config.selectionCssMode === 'cssClass' && this.config.selectionCssClass) {\n                    cellElement.classList.add(this.config.selectionCssClass);\n                } else {\n                    cellElement.style.backgroundColor = 'var(--table-selection-background-color, Highlight)';\n                    cellElement.style.color = 'var(--table-selection-color, HighlightText)';\n                }\n            });\n        }\n    }\n\n    protected deselect(): void {\n        if (this.range && this.range.cells) {\n            this.range.cells.forEach((cellElement) => {\n                if (this.config.selectionCssMode === 'cssClass' && this.config.selectionCssClass) {\n                    cellElement.classList.remove(this.config.selectionCssClass);\n                } else {\n                    cellElement.style.removeProperty('background-color');\n                    cellElement.style.removeProperty('color');\n                }\n            });\n            this.range = null;\n        }\n    }\n\n    protected copyToClipboard(e: ClipboardEvent): void {\n        if (! this.range || ! this.range.rows || ! e.clipboardData) {\n            return;\n        }\n\n        const selectionText = (this.range.rows as HTMLTableCellElement[][])\n            .map((row) => row.map((cell) => cell.innerText).join('\\t'))\n            .join('\\r\\n');\n\n        if (! selectionText) {\n            return;\n        }\n\n        e.clipboardData.setData('text/plain', selectionText);\n        e.preventDefault();\n    }\n\n}\n","/*!\n * TableSelection library v1.0.0 (https://github.com/PXLWidgets/table-selection)\n * Copyright (c) 2019 Wouter Smit\n * Licensed under MIT (https://github.com/PXLWidgets/table-selection/blob/master/LICENSE)\n*/\n\nimport { TableSelection } from './ts/TableSelection';\n\nexport default TableSelection;\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","defaultConfig","rootDocument","document","selector","selectionCssMode","selectionCssClass","config","range","this","styles","createElement","innerHTML","head","appendChild","addEventListener","onSelectionChange","e","copyToClipboard","selection","getSelection","deselect","isCollapsed","startCell","getCellElementFromNode","anchorNode","endCell","focusNode","startTableElements","getTableElementsFromCellElement","endTableElements","table","elements","getRangeByStartAndEndElement","getRowElements","getRowsAndCells","select","startCellElement","endCellElement","startRowElement","parentElement","endRowElement","start","row","rowIndex","cell","cellIndex","end","rowElements","rows","cells","numTableHeaders","querySelectorAll","length","theadRows","tbodyRows","theadStart","Math","min","theadEnd","tbodyStart","max","tbodyEnd","Array","from","forEach","i","cellsInRow","join","inputNode","element","nodeName","closest","includes","tagName","cellElement","tHeadOrBody","matches","thead","querySelector","tbody","classList","add","style","backgroundColor","color","remove","removeProperty","clipboardData","selectionText","map","innerText","setData","preventDefault"],"sourceRoot":""}